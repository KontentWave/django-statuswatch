[project]
name = "statuswatch"
version = "0.1.0"
description = "Multi-tenant SaaS monitoring platform"
requires-python = ">=3.12"

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
  | node_modules
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/node_modules/*", "*/.venv/*"]
known_first_party = ["api", "app", "tenants", "payments"]
known_django = ["django", "rest_framework"]
sections = ["FUTURE", "STDLIB", "DJANGO", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.ruff]
line-length = 100
target-version = "py312"
extend-exclude = [
    "migrations",
    "node_modules",
    ".venv",
    "staticfiles",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"*/tests/*.py" = ["S101", "B011", "B007", "E731"]   # Allow asserts in tests, assert False, unused loop vars, lambdas
"*/scripts/*.py" = ["E402"] # Allow imports not at top in scripts (Django requires setup before imports)
"backend/api/exception_handler.py" = ["UP038"]  # Keep tuple isinstance for readability
"backend/api/password_validators.py" = ["UP031"]  # Keep % formatting for Django i18n

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, can tighten later
ignore_missing_imports = true
plugins = ["mypy_django_plugin.main"]
exclude = [
    "^.*/tests/.*\\.py$",  # Exclude all test files
    "^tests/.*\\.py$",     # Exclude root tests directory
]

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.django-stubs]
django_settings_module = "app.settings"

[tool.bandit]
exclude_dirs = [
    "*/tests/*",
    "*/migrations/*",
    "*/scripts/*",
    "node_modules",
    ".venv",
    "staticfiles",
]
skips = ["B101", "B105", "B106", "B110", "B601"]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "app.settings"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
testpaths = ["backend/tests"]
addopts = [
    "--reuse-db",
    "--nomigrations",
    "-v",
    "--tb=short",
    "--strict-markers",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["backend"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/node_modules/*",
    "*/.venv/*",
    "*/staticfiles/*",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
