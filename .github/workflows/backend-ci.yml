name: backend-ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: devpass
          POSTGRES_DB: dj01
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U postgres -d dj01"
          --health-interval=10s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7
        ports: [ "6379:6379" ]
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=10s --health-timeout=5s --health-retries=5

    env:
      DATABASE_URL: postgresql://postgres:devpass@localhost:5432/dj01
      REDIS_URL: redis://localhost:6379/0
      STRIPE_PUBLIC_KEY: pk_test_dummy
      STRIPE_SECRET_KEY: sk_test_dummy
      DJANGO_SETTINGS_MODULE: app.settings
      PYTHONUNBUFFERED: "1"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: backend/requirements*.txt

      - name: Install deps
        working-directory: backend
        run: |
          python -m pip install -U pip
          pip install -r requirements-dev.txt

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            (echo > /dev/tcp/127.0.0.1/5432) >/dev/null 2>&1 && break
            sleep 1
          done

      - name: Migrate (shared)
        working-directory: backend
        run: python manage.py migrate_schemas --shared --noinput

      - name: Create tenant + migrate (tenant)
        working-directory: backend
        run: |
          python - <<'PY'
          import os, django
          os.environ.setdefault("DJANGO_SETTINGS_MODULE","app.settings"); django.setup()
          from tenants.models import Client, Domain
          c,_ = Client.objects.get_or_create(schema_name="acme", defaults={"name":"Acme"})
          Domain.objects.get_or_create(domain="acme.test.local", defaults={"tenant":c, "is_primary":True})
          PY
          python manage.py migrate_schemas --tenant --noinput

      - name: Run tests (if any)
        working-directory: backend
        run: pytest -q || true
